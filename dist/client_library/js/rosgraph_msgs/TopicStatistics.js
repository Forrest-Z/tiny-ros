(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f();}else if(typeof define==="function"&&define.amd){define([],f);}else{var g;if(typeof window!=="undefined"){g=window;}else if(typeof global!=="undefined"){g=global;}else if(typeof self!=="undefined"){g=self;}else{g=this;}if(typeof g.rosgraph_msgs==="undefined"){g.rosgraph_msgs={};}g.rosgraph_msgs.TopicStatistics=f();}})(function(){var define,module,exports;'use strict';
const _CURRENT_PATH_ = document.currentScript.src.substring(0, document.currentScript.src.lastIndexOf("/"));
const _ROOT_PATH_ = _CURRENT_PATH_.substring(0, _CURRENT_PATH_.lastIndexOf("/"));
document.write("<script language=javascript src='"+_ROOT_PATH_+"/tinyros/Time.js'></script>");
document.write("<script language=javascript src='"+_ROOT_PATH_+"/tinyros/Duration.js'></script>");

function TopicStatistics() {
    this.topic = "";
    this.node_pub = "";
    this.node_sub = "";
    this.window_start = tinyros.Time();
    this.window_stop = tinyros.Time();
    this.delivered_msgs = 0;
    this.dropped_msgs = 0;
    this.traffic = 0;
    this.period_mean = tinyros.Duration();
    this.period_stddev = tinyros.Duration();
    this.period_max = tinyros.Duration();
    this.stamp_age_mean = tinyros.Duration();
    this.stamp_age_stddev = tinyros.Duration();
    this.stamp_age_max = tinyros.Duration();
};

TopicStatistics.prototype.serialize = function(buff, idx) {
    var offset = idx;
    var encoder_topic = new TextEncoder('utf8');
    var utf8array_topic = encoder_topic.encode(this.topic);
    buff[offset + 0] = (utf8array_topic.length >> (8 * 0)) & 0xFF;
    buff[offset + 1] = (utf8array_topic.length >> (8 * 1)) & 0xFF;
    buff[offset + 2] = (utf8array_topic.length >> (8 * 2)) & 0xFF;
    buff[offset + 3] = (utf8array_topic.length >> (8 * 3)) & 0xFF;
    offset += 4;
    for (var i = 0; i < utf8array_topic.length; i++) {
        buff[offset + i] = utf8array_topic[i];
    }
    offset += utf8array_topic.length;
    var encoder_node_pub = new TextEncoder('utf8');
    var utf8array_node_pub = encoder_node_pub.encode(this.node_pub);
    buff[offset + 0] = (utf8array_node_pub.length >> (8 * 0)) & 0xFF;
    buff[offset + 1] = (utf8array_node_pub.length >> (8 * 1)) & 0xFF;
    buff[offset + 2] = (utf8array_node_pub.length >> (8 * 2)) & 0xFF;
    buff[offset + 3] = (utf8array_node_pub.length >> (8 * 3)) & 0xFF;
    offset += 4;
    for (var i = 0; i < utf8array_node_pub.length; i++) {
        buff[offset + i] = utf8array_node_pub[i];
    }
    offset += utf8array_node_pub.length;
    var encoder_node_sub = new TextEncoder('utf8');
    var utf8array_node_sub = encoder_node_sub.encode(this.node_sub);
    buff[offset + 0] = (utf8array_node_sub.length >> (8 * 0)) & 0xFF;
    buff[offset + 1] = (utf8array_node_sub.length >> (8 * 1)) & 0xFF;
    buff[offset + 2] = (utf8array_node_sub.length >> (8 * 2)) & 0xFF;
    buff[offset + 3] = (utf8array_node_sub.length >> (8 * 3)) & 0xFF;
    offset += 4;
    for (var i = 0; i < utf8array_node_sub.length; i++) {
        buff[offset + i] = utf8array_node_sub[i];
    }
    offset += utf8array_node_sub.length;
    buff[offset + 0] = ((+this.window_start.sec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.window_start.sec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.window_start.sec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.window_start.sec) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.window_start.nsec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.window_start.nsec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.window_start.nsec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.window_start.nsec) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.window_stop.sec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.window_stop.sec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.window_stop.sec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.window_stop.sec) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.window_stop.nsec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.window_stop.nsec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.window_stop.nsec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.window_stop.nsec) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.delivered_msgs) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.delivered_msgs) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.delivered_msgs) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.delivered_msgs) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.dropped_msgs) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.dropped_msgs) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.dropped_msgs) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.dropped_msgs) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.traffic) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.traffic) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.traffic) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.traffic) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.period_mean.sec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.period_mean.sec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.period_mean.sec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.period_mean.sec) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.period_mean.nsec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.period_mean.nsec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.period_mean.nsec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.period_mean.nsec) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.period_stddev.sec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.period_stddev.sec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.period_stddev.sec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.period_stddev.sec) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.period_stddev.nsec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.period_stddev.nsec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.period_stddev.nsec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.period_stddev.nsec) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.period_max.sec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.period_max.sec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.period_max.sec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.period_max.sec) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.period_max.nsec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.period_max.nsec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.period_max.nsec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.period_max.nsec) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.stamp_age_mean.sec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.stamp_age_mean.sec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.stamp_age_mean.sec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.stamp_age_mean.sec) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.stamp_age_mean.nsec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.stamp_age_mean.nsec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.stamp_age_mean.nsec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.stamp_age_mean.nsec) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.stamp_age_stddev.sec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.stamp_age_stddev.sec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.stamp_age_stddev.sec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.stamp_age_stddev.sec) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.stamp_age_stddev.nsec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.stamp_age_stddev.nsec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.stamp_age_stddev.nsec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.stamp_age_stddev.nsec) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.stamp_age_max.sec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.stamp_age_max.sec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.stamp_age_max.sec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.stamp_age_max.sec) >> (8 * 3)) & 0xFF;
    offset += 4;
    buff[offset + 0] = ((+this.stamp_age_max.nsec) >> (8 * 0)) & 0xFF;
    buff[offset + 1] = ((+this.stamp_age_max.nsec) >> (8 * 1)) & 0xFF;
    buff[offset + 2] = ((+this.stamp_age_max.nsec) >> (8 * 2)) & 0xFF;
    buff[offset + 3] = ((+this.stamp_age_max.nsec) >> (8 * 3)) & 0xFF;
    offset += 4;
    return offset;
};

TopicStatistics.prototype.deserialize = function(buff, idx) {
    var offset = idx;
    var length_topic = +((buff[offset + 0] & 0xFF) << (8 * 0));
    length_topic |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    length_topic |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    length_topic |= +((buff[offset + 3] & 0xFF) << (8 * 3))
    offset += 4;
    var decoder_topic = new TextDecoder('utf8');
    this.topic = decoder_topic.decode(buff.slice(offset, offset + length_topic));
    offset += length_topic;
    var length_node_pub = +((buff[offset + 0] & 0xFF) << (8 * 0));
    length_node_pub |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    length_node_pub |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    length_node_pub |= +((buff[offset + 3] & 0xFF) << (8 * 3))
    offset += 4;
    var decoder_node_pub = new TextDecoder('utf8');
    this.node_pub = decoder_node_pub.decode(buff.slice(offset, offset + length_node_pub));
    offset += length_node_pub;
    var length_node_sub = +((buff[offset + 0] & 0xFF) << (8 * 0));
    length_node_sub |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    length_node_sub |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    length_node_sub |= +((buff[offset + 3] & 0xFF) << (8 * 3))
    offset += 4;
    var decoder_node_sub = new TextDecoder('utf8');
    this.node_sub = decoder_node_sub.decode(buff.slice(offset, offset + length_node_sub));
    offset += length_node_sub;
    this.window_start.sec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.window_start.sec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.window_start.sec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.window_start.sec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.window_start.nsec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.window_start.nsec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.window_start.nsec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.window_start.nsec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.window_stop.sec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.window_stop.sec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.window_stop.sec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.window_stop.sec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.window_stop.nsec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.window_stop.nsec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.window_stop.nsec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.window_stop.nsec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.delivered_msgs = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.delivered_msgs |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.delivered_msgs |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.delivered_msgs |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.dropped_msgs = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.dropped_msgs |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.dropped_msgs |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.dropped_msgs |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.traffic = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.traffic |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.traffic |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.traffic |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.period_mean.sec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.period_mean.sec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.period_mean.sec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.period_mean.sec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.period_mean.nsec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.period_mean.nsec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.period_mean.nsec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.period_mean.nsec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.period_stddev.sec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.period_stddev.sec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.period_stddev.sec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.period_stddev.sec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.period_stddev.nsec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.period_stddev.nsec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.period_stddev.nsec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.period_stddev.nsec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.period_max.sec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.period_max.sec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.period_max.sec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.period_max.sec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.period_max.nsec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.period_max.nsec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.period_max.nsec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.period_max.nsec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.stamp_age_mean.sec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.stamp_age_mean.sec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.stamp_age_mean.sec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.stamp_age_mean.sec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.stamp_age_mean.nsec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.stamp_age_mean.nsec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.stamp_age_mean.nsec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.stamp_age_mean.nsec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.stamp_age_stddev.sec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.stamp_age_stddev.sec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.stamp_age_stddev.sec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.stamp_age_stddev.sec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.stamp_age_stddev.nsec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.stamp_age_stddev.nsec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.stamp_age_stddev.nsec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.stamp_age_stddev.nsec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.stamp_age_max.sec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.stamp_age_max.sec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.stamp_age_max.sec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.stamp_age_max.sec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    this.stamp_age_max.nsec = +((buff[offset + 0] & 0xFF) << (8 * 0));
    this.stamp_age_max.nsec |= +((buff[offset + 1] & 0xFF) << (8 * 1));
    this.stamp_age_max.nsec |= +((buff[offset + 2] & 0xFF) << (8 * 2));
    this.stamp_age_max.nsec |= +((buff[offset + 3] & 0xFF) << (8 * 3));
    offset += 4;
    return offset;
};

TopicStatistics.prototype.serializedLength = function() {
    var length = 0;
    var encoder_topic = new TextEncoder('utf8');
    var utf8array_topic = encoder_topic.encode(this.topic);
    length += 4;
    length += utf8array_topic.length;
    var encoder_node_pub = new TextEncoder('utf8');
    var utf8array_node_pub = encoder_node_pub.encode(this.node_pub);
    length += 4;
    length += utf8array_node_pub.length;
    var encoder_node_sub = new TextEncoder('utf8');
    var utf8array_node_sub = encoder_node_sub.encode(this.node_sub);
    length += 4;
    length += utf8array_node_sub.length;
    length += 4
    length += 4
    length += 4
    length += 4
    length += 4
    length += 4
    length += 4
    length += 4
    length += 4
    length += 4
    length += 4
    length += 4
    length += 4
    length += 4
    length += 4
    length += 4
    length += 4
    length += 4
    length += 4
    return length;
};

TopicStatistics.prototype.echo = function() { return ""; };

TopicStatistics.prototype.getType = function() { return "rosgraph_msgs/TopicStatistics"; };

TopicStatistics.prototype.getMD5 = function() { return "8b30d3f22284a3bee7679b7194bd38a3"; };

TopicStatistics.prototype.getID = function() { return 0; };

TopicStatistics.prototype.setID = function(id) { };

return function() { return new TopicStatistics(); };

});
